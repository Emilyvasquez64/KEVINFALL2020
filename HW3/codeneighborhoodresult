> #title: "HW#3 Neighborhood Data"
> #author: "Emmanuel" Emily Vazquez, Erik Carlson, Joe Correa
> #date: "10/4/2020"
> #output: html_document
> load("acs2017_ny_data.RData")
Error in readChar(con, 5L, useBytes = TRUE) : cannot open the connection
> PUMA_lev <-read.csv("PUMA_levels.csv")
> dat_NYC <- subset(acs2017_ny, (acs2017_ny$in_NYC == 1) & (acs2017_ny$AGE > 20) & (acs2017_ny$AGE < 66))
> attach(dat_NYC)
The following objects are masked from dat_NYC (pos = 3):

    AfAm, AGE, Amindian, ANCESTR1, ANCESTR1D, ANCESTR2, ANCESTR2D, Asian,
    below_150poverty, below_200poverty, below_povertyline, BPL, BPLD, BUILTYR2,
    CITIZEN, CLASSWKR, CLASSWKRD, Commute_bus, Commute_car, Commute_other,
    Commute_rail, Commute_subway, COSTELEC, COSTFUEL, COSTGAS, COSTWATR,
    DEGFIELD, DEGFIELD2, DEGFIELD2D, DEGFIELDD, DEPARTS, EDUC, educ_advdeg,
    educ_college, educ_hs, educ_nohs, educ_somecoll, EDUCD, EMPSTAT, EMPSTATD,
    FAMSIZE, female, foodstamps, FOODSTMP, FTOTINC, FUELHEAT, GQ,
    has_AnyHealthIns, has_PvtHealthIns, HCOVANY, HCOVPRIV, HHINCOME, Hisp_Cuban,
    Hisp_DomR, Hisp_Mex, Hisp_PR, HISPAN, HISPAND, Hispanic, in_Bronx,
    in_Brooklyn, in_Manhattan, in_Nassau, in_NYC, in_Queens, in_StatenI,
    in_Westchester, INCTOT, INCWAGE, IND, LABFORCE, LINGISOL, MARST, MIGCOUNTY1,
    MIGPLAC1, MIGPUMA1, MIGRATE1, MIGRATE1D, MORTGAGE, NCHILD, NCHLT5, OCC,
    OWNCOST, OWNERSHP, OWNERSHPD, POVERTY, PUMA, PWPUMA00, RACE, race_oth, RACED,
    RELATE, RELATED, RENT, ROOMS, SCHOOL, SEX, SSMC, TRANTIME, TRANWORK,
    UHRSWORK, UNITSSTR, unmarried, veteran, VETSTAT, VETSTATD, white, WKSWORK2,
    YRSUSA1

The following objects are masked from dat_NYC (pos = 5):

    AfAm, AGE, Amindian, ANCESTR1, ANCESTR1D, ANCESTR2, ANCESTR2D, Asian,
    below_150poverty, below_200poverty, below_povertyline, BPL, BPLD, BUILTYR2,
    CITIZEN, CLASSWKR, CLASSWKRD, Commute_bus, Commute_car, Commute_other,
    Commute_rail, Commute_subway, COSTELEC, COSTFUEL, COSTGAS, COSTWATR,
    DEGFIELD, DEGFIELD2, DEGFIELD2D, DEGFIELDD, DEPARTS, EDUC, educ_advdeg,
    educ_college, educ_hs, educ_nohs, educ_somecoll, EDUCD, EMPSTAT, EMPSTATD,
    FAMSIZE, female, foodstamps, FOODSTMP, FTOTINC, FUELHEAT, GQ,
    has_AnyHealthIns, has_PvtHealthIns, HCOVANY, HCOVPRIV, HHINCOME, Hisp_Cuban,
    Hisp_DomR, Hisp_Mex, Hisp_PR, HISPAN, HISPAND, Hispanic, in_Bronx,
    in_Brooklyn, in_Manhattan, in_Nassau, in_NYC, in_Queens, in_StatenI,
    in_Westchester, INCTOT, INCWAGE, IND, LABFORCE, LINGISOL, MARST, MIGCOUNTY1,
    MIGPLAC1, MIGPUMA1, MIGRATE1, MIGRATE1D, MORTGAGE, NCHILD, NCHLT5, OCC,
    OWNCOST, OWNERSHP, OWNERSHPD, POVERTY, PUMA, PWPUMA00, RACE, race_oth, RACED,
    RELATE, RELATED, RENT, ROOMS, SCHOOL, SEX, SSMC, TRANTIME, TRANWORK,
    UHRSWORK, UNITSSTR, unmarried, veteran, VETSTAT, VETSTATD, white, WKSWORK2,
    YRSUSA1

The following objects are masked from dat_use (pos = 6):

    AfAm, AGE, Amindian, ANCESTR1, ANCESTR1D, ANCESTR2, ANCESTR2D, Asian,
    below_150poverty, below_200poverty, below_povertyline, BPL, BPLD, BUILTYR2,
    CITIZEN, CLASSWKR, CLASSWKRD, Commute_bus, Commute_car, Commute_other,
    Commute_rail, Commute_subway, COSTELEC, COSTFUEL, COSTGAS, COSTWATR,
    DEGFIELD, DEGFIELD2, DEGFIELD2D, DEGFIELDD, DEPARTS, EDUC, educ_advdeg,
    educ_college, educ_hs, educ_nohs, educ_somecoll, EDUCD, EMPSTAT, EMPSTATD,
    FAMSIZE, female, foodstamps, FOODSTMP, FTOTINC, FUELHEAT, GQ,
    has_AnyHealthIns, has_PvtHealthIns, HCOVANY, HCOVPRIV, HHINCOME, Hisp_Cuban,
    Hisp_DomR, Hisp_Mex, Hisp_PR, HISPAN, HISPAND, Hispanic, in_Bronx,
    in_Brooklyn, in_Manhattan, in_Nassau, in_NYC, in_Queens, in_StatenI,
    in_Westchester, INCTOT, INCWAGE, IND, LABFORCE, LINGISOL, MARST, MIGCOUNTY1,
    MIGPLAC1, MIGPUMA1, MIGRATE1, MIGRATE1D, MORTGAGE, NCHILD, NCHLT5, OCC,
    OWNCOST, OWNERSHP, OWNERSHPD, POVERTY, PUMA, PWPUMA00, RACE, race_oth, RACED,
    RELATE, RELATED, RENT, ROOMS, SCHOOL, SEX, SSMC, TRANTIME, TRANWORK,
    UHRSWORK, UNITSSTR, unmarried, veteran, VETSTAT, VETSTATD, white, WKSWORK2,
    YRSUSA1

The following objects are masked from dat_use (pos = 7):

    AfAm, AGE, Amindian, ANCESTR1, ANCESTR1D, ANCESTR2, ANCESTR2D, Asian,
    below_150poverty, below_200poverty, below_povertyline, BPL, BPLD, BUILTYR2,
    CITIZEN, CLASSWKR, CLASSWKRD, Commute_bus, Commute_car, Commute_other,
    Commute_rail, Commute_subway, COSTELEC, COSTFUEL, COSTGAS, COSTWATR,
    DEGFIELD, DEGFIELD2, DEGFIELD2D, DEGFIELDD, DEPARTS, EDUC, educ_advdeg,
    educ_college, educ_hs, educ_nohs, educ_somecoll, EDUCD, EMPSTAT, EMPSTATD,
    FAMSIZE, female, foodstamps, FOODSTMP, FTOTINC, FUELHEAT, GQ,
    has_AnyHealthIns, has_PvtHealthIns, HCOVANY, HCOVPRIV, HHINCOME, Hisp_Cuban,
    Hisp_DomR, Hisp_Mex, Hisp_PR, HISPAN, HISPAND, Hispanic, in_Bronx,
    in_Brooklyn, in_Manhattan, in_Nassau, in_NYC, in_Queens, in_StatenI,
    in_Westchester, INCTOT, INCWAGE, IND, LABFORCE, LINGISOL, MARST, MIGCOUNTY1,
    MIGPLAC1, MIGPUMA1, MIGRATE1, MIGRATE1D, MORTGAGE, NCHILD, NCHLT5, OCC,
    OWNCOST, OWNERSHP, OWNERSHPD, POVERTY, PUMA, PWPUMA00, RACE, race_oth, RACED,
    RELATE, RELATED, RENT, ROOMS, SCHOOL, SEX, SSMC, TRANTIME, TRANWORK,
    UHRSWORK, UNITSSTR, unmarried, veteran, VETSTAT, VETSTATD, white, WKSWORK2,
    YRSUSA1

The following objects are masked from dat_use (pos = 8):

    AfAm, AGE, Amindian, ANCESTR1, ANCESTR1D, ANCESTR2, ANCESTR2D, Asian,
    below_150poverty, below_200poverty, below_povertyline, BPL, BPLD, BUILTYR2,
    CITIZEN, CLASSWKR, CLASSWKRD, Commute_bus, Commute_car, Commute_other,
    Commute_rail, Commute_subway, COSTELEC, COSTFUEL, COSTGAS, COSTWATR,
    DEGFIELD, DEGFIELD2, DEGFIELD2D, DEGFIELDD, DEPARTS, EDUC, educ_advdeg,
    educ_college, educ_hs, educ_nohs, educ_somecoll, EDUCD, EMPSTAT, EMPSTATD,
    FAMSIZE, female, foodstamps, FOODSTMP, FTOTINC, FUELHEAT, GQ,
    has_AnyHealthIns, has_PvtHealthIns, HCOVANY, HCOVPRIV, HHINCOME, Hisp_Cuban,
    Hisp_DomR, Hisp_Mex, Hisp_PR, HISPAN, HISPAND, Hispanic, in_Bronx,
    in_Brooklyn, in_Manhattan, in_Nassau, in_NYC, in_Queens, in_StatenI,
    in_Westchester, INCTOT, INCWAGE, IND, LABFORCE, LINGISOL, MARST, MIGCOUNTY1,
    MIGPLAC1, MIGPUMA1, MIGRATE1, MIGRATE1D, MORTGAGE, NCHILD, NCHLT5, OCC,
    OWNCOST, OWNERSHP, OWNERSHPD, POVERTY, PUMA, PWPUMA00, RACE, race_oth, RACED,
    RELATE, RELATED, RENT, ROOMS, SCHOOL, SEX, SSMC, TRANTIME, TRANWORK,
    UHRSWORK, UNITSSTR, unmarried, veteran, VETSTAT, VETSTATD, white, WKSWORK2,
    YRSUSA1

> #borough_f assigned to neighborhoods
> borough_f <- factor(PUMA)
> norm_varb <- function(X_in) {
+     (max(X_in, na.rm = TRUE) - X_in)/( max(X_in, na.rm = TRUE) - min(X_in, na.rm = TRUE) )}
> add_test <- COSTGAS + COSTWATR + COSTELEC + COSTFUEL + FUELHEAT + FAMSIZE + unmarried
> norm_1 <- norm_varb(add_test)
> norm_2 <- norm_varb(HHINCOME)
> data_use_prelim <- data.frame(norm_1,norm_2)
> good_obs_data_use <- complete.cases(data_use_prelim,borough_f)
> dat_use <- subset(data_use_prelim,good_obs_data_use)
> y_use <- subset(borough_f,good_obs_data_use)
> levels
function (x) 
UseMethod("levels")
<bytecode: 0x7ff9028acf20>
<environment: namespace:base>
> set.seed(12345)
> NN_obs <- sum(good_obs_data_use == 1)
> select1 <- (runif(NN_obs) < 0.8)
> train_data <- subset(dat_use,select1)
> test_data <- subset(dat_use,(!select1))
> cl_data <- y_use[select1]
> true_data <- y_use[!select1]
> summary(cl_data)
3701 3702 3703 3704 3705 3706 3707 3708 3709 3710 3801 3802 3803 3804 3805 3806 3807 3808 
 375  515  339  477  565  377  470  432  592  471  643  370  474  367  543  459  565  392 
3809 3810 3901 3902 3903 4001 4002 4003 4004 4005 4006 4007 4008 4009 4010 4011 4012 4013 
 497  586  575  511  753  706  580  555  710  646  592  425  617 1137  599  390  652  756 
4014 4015 4016 4017 4018 4101 4102 4103 4104 4105 4106 4107 4108 4109 4110 4111 4112 4113 
 660  696  858 1116  378  995  641 1118  631  970  600  515  502  633 1029  885 1179  630 
4114 
 382 
> prop.table(summary(cl_data))
      3701       3702       3703       3704       3705       3706       3707       3708 
0.01098708 0.01508892 0.00993232 0.01397556 0.01655387 0.01104568 0.01377047 0.01265712 
      3709       3710       3801       3802       3803       3804       3805       3806 
0.01734494 0.01379977 0.01883918 0.01084058 0.01388767 0.01075269 0.01590929 0.01344818 
      3807       3808       3809       3810       3901       3902       3903       4001 
0.01655387 0.01148516 0.01456154 0.01716914 0.01684685 0.01497173 0.02206206 0.02068501 
      4002       4003       4004       4005       4006       4007       4008       4009 
0.01699335 0.01626088 0.02080220 0.01892708 0.01734494 0.01245202 0.01807741 0.03331282 
      4010       4011       4012       4013       4014       4015       4016       4017 
0.01755003 0.01142656 0.01910287 0.02214995 0.01933726 0.02039202 0.02513844 0.03269755 
      4018       4101       4102       4103       4104       4105       4106       4107 
0.01107498 0.02915238 0.01878058 0.03275615 0.01848759 0.02841991 0.01757933 0.01508892 
      4108       4109       4110       4111       4112       4113       4114 
0.01470804 0.01854619 0.03014855 0.02592951 0.03454338 0.01845829 0.01119217 
> summary(train_data)
     norm_1           norm_2      
 Min.   :0.0000   Min.   :0.0000  
 1st Qu.:0.2232   1st Qu.:0.9229  
 Median :0.4452   Median :0.9537  
 Mean   :0.3930   Mean   :0.9374  
 3rd Qu.:0.5675   3rd Qu.:0.9755  
 Max.   :0.9779   Max.   :1.0000  
> require(class)
> for (indx in seq(1, 5, by= 2))
+ {pred_borough <- knn(train_data, test_data, cl_data, k = indx, l = 0, prob = FALSE, use.all = TRUE)
+ num_correct_labels <- sum(pred_borough == true_data)
+ correct_rate <- num_correct_labels/length(true_data)
+ print(c(indx,correct_rate))}
[1] 1.0000000 0.6933619
[1] 3.0000000 0.3007985
[1] 5.0000000 0.2217852
#the next step after classification of boroughs was to determine wether we could refine our data to pin down which neighborhoods these people lived in
#in order to do this, we loaded the PUMA_levels.cvs file which contains the PUMA number ( kind of like a zipcode) and crossed referenced it to : COSTGAS + COSTWATR + COSTELEC + COSTFUEL + FUELHEAT + FAMSIZE + unmarried 
#vs HHINCOME 
# we obtained the individuals neighborhoods with 69.34% accuracy 
